/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2412                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volVectorField;
    object      U;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// Dimensions: [m/s]
dimensions      [0 1 -1 0 0 0 0];

// Initial velocity in the domain
// Average aortic blood velocity: ~0.3-0.5 m/s
internalField   uniform (0.4 0 0);

boundaryField
{
    inlet
    {
        // Parabolic velocity inlet for more physiological flow
        // For pulsatile flow, you would use a time-varying BC instead
        type            codedFixedValue;
        value           uniform (0.4 0 0);
        
        // Parabolic profile code
        name            parabolicVelocity;
        code
        #{
            const fvPatch& boundaryPatch = patch();
            const vectorField& Cf = boundaryPatch.Cf();
            
            // Get the diameter from mesh
            scalar yMin = min(Cf.component(1));
            scalar yMax = max(Cf.component(1));
            scalar diameter = yMax - yMin;
            scalar radius = diameter/2.0;
            scalar centerY = (yMax + yMin)/2.0;
            
            // Maximum velocity at centerline (2x avg for parabolic profile)
            scalar maxVelocity = 0.8;
            
            // Calculate parabolic profile
            vectorField& v = *this;
            forAll(v, i)
            {
                scalar y = Cf[i].component(1);
                scalar distFromCenter = mag(y - centerY);
                scalar normalizedDist = distFromCenter/radius;
                
                // Parabolic profile: v(r) = vMax * (1 - (r/R)Â²)
                scalar velocityMagnitude = maxVelocity * (1.0 - sqr(normalizedDist));
                v[i] = vector(velocityMagnitude, 0, 0);
            }
        #};
    }

    outlet
    {
        type            zeroGradient;
    }

    wall
    {
        type            noSlip;  // No-slip condition at the walls
    }
}

// ************************************************************************* //